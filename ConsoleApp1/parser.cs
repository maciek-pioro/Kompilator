// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  DESKTOP-ERPUR5C
// DateTime: 01.06.2021 19:40:58
// UserName: macie
// Input file <.\kompilator.y - 01.06.2021 19:40:57>

// options: lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace GardensPoint
{
public enum Tokens {error=2,EOF=3,IntNumber=4,RealNumber=5,Plus=6,
    String=7,Ident=8,Program=9,If=10,Else=11,While=12,
    Read=13,Write=14,Return=15,Int=16,Double=17,Bool=18,
    True=19,False=20,Hex=21,Equals=22,NotEquals=23,GEQ=24,
    LEQ=25,LogicalOr=26,LogicalAnd=27,Assign=28,GT=29,LT=30,
    Comma=31,LogicalNot=32,BitAnd=33,BitOr=34,BitNot=35,Minus=36,
    Multiplies=37,Divides=38,OpenPar=39,ClosePar=40,OpenBra=41,CloseBra=42,
    Semicolon=43,Eof=44,Error=45,Endl=46};

public struct ValueType
#line 7 ".\kompilator.y"
{
  public string value;
  public int lineNumber;
  public Tree tree;
  public List<String> stringList;
  public Type type;
  public List<Tree> treeList;
}
#line default
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[35];
  private static State[] states = new State[68];
  private static string[] nonTerms = new string[] {
      "start", "$accept", "declaration_list", "instruction_list", "declaration", 
      "type", "identifier_list", "instruction", "Anon@1", "expression", "Anon@2", 
      "Anon@3", "Anon@4", "constant", };

  static Parser() {
    states[0] = new State(new int[]{9,3},new int[]{-1,1});
    states[1] = new State(new int[]{3,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{41,4});
    states[4] = new State(new int[]{16,65,17,66,18,67,42,-22,13,-22,8,-22,5,-22,4,-22,19,-22,20,-22,7,-22,10,-22,12,-22,14,-22,15,-22},new int[]{-3,5,-5,57,-6,59});
    states[5] = new State(-20,new int[]{-4,6});
    states[6] = new State(new int[]{42,7,13,10,8,23,5,27,4,28,19,29,20,30,7,31,10,32,12,40,14,45,15,55},new int[]{-8,9,-10,18,-14,26});
    states[7] = new State(new int[]{3,8});
    states[8] = new State(-2);
    states[9] = new State(-19);
    states[10] = new State(new int[]{8,14},new int[]{-9,11});
    states[11] = new State(new int[]{8,12});
    states[12] = new State(new int[]{43,13});
    states[13] = new State(-7);
    states[14] = new State(new int[]{31,15});
    states[15] = new State(new int[]{21,16});
    states[16] = new State(new int[]{43,17});
    states[17] = new State(-13);
    states[18] = new State(new int[]{6,21,43,-8},new int[]{-11,19});
    states[19] = new State(new int[]{43,20});
    states[20] = new State(-9);
    states[21] = new State(new int[]{8,23,5,27,4,28,19,29,20,30,7,31},new int[]{-10,22,-14,26});
    states[22] = new State(new int[]{6,21,43,-31,40,-31,31,-31});
    states[23] = new State(new int[]{28,24,6,-33,43,-33,40,-33,31,-33});
    states[24] = new State(new int[]{8,23,5,27,4,28,19,29,20,30,7,31},new int[]{-10,25,-14,26});
    states[25] = new State(new int[]{6,21,43,-32,40,-32,31,-32});
    states[26] = new State(-34);
    states[27] = new State(-26);
    states[28] = new State(-27);
    states[29] = new State(-28);
    states[30] = new State(-29);
    states[31] = new State(-30);
    states[32] = new State(-10,new int[]{-12,33});
    states[33] = new State(new int[]{39,34});
    states[34] = new State(new int[]{8,23,5,27,4,28,19,29,20,30,7,31},new int[]{-10,35,-14,26});
    states[35] = new State(new int[]{40,36,6,21});
    states[36] = new State(new int[]{13,10,8,23,5,27,4,28,19,29,20,30,7,31,10,32,12,40,14,45,15,55},new int[]{-8,37,-10,18,-14,26});
    states[37] = new State(new int[]{11,38});
    states[38] = new State(new int[]{13,10,8,23,5,27,4,28,19,29,20,30,7,31,10,32,12,40,14,45,15,55},new int[]{-8,39,-10,18,-14,26});
    states[39] = new State(-11);
    states[40] = new State(new int[]{39,41});
    states[41] = new State(new int[]{8,23,5,27,4,28,19,29,20,30,7,31},new int[]{-10,42,-14,26});
    states[42] = new State(new int[]{40,43,6,21});
    states[43] = new State(new int[]{13,10,8,23,5,27,4,28,19,29,20,30,7,31,10,32,12,40,14,45,15,55},new int[]{-8,44,-10,18,-14,26});
    states[44] = new State(-12);
    states[45] = new State(new int[]{8,23,5,27,4,28,19,29,20,30,7,31},new int[]{-13,46,-10,49,-14,53});
    states[46] = new State(new int[]{5,27,4,28,19,29,20,30,7,31},new int[]{-14,47});
    states[47] = new State(new int[]{43,48});
    states[48] = new State(-15);
    states[49] = new State(new int[]{31,50,6,21});
    states[50] = new State(new int[]{21,51});
    states[51] = new State(new int[]{43,52});
    states[52] = new State(-16);
    states[53] = new State(new int[]{43,54,31,-34,6,-34});
    states[54] = new State(-17);
    states[55] = new State(new int[]{43,56});
    states[56] = new State(-18);
    states[57] = new State(new int[]{16,65,17,66,18,67,42,-22,13,-22,8,-22,5,-22,4,-22,19,-22,20,-22,7,-22,10,-22,12,-22,14,-22,15,-22},new int[]{-3,58,-5,57,-6,59});
    states[58] = new State(-21);
    states[59] = new State(new int[]{8,62},new int[]{-7,60});
    states[60] = new State(new int[]{43,61});
    states[61] = new State(-3);
    states[62] = new State(new int[]{31,63,43,-4});
    states[63] = new State(new int[]{8,62},new int[]{-7,64});
    states[64] = new State(-5);
    states[65] = new State(-23);
    states[66] = new State(-24);
    states[67] = new State(-25);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,3});
    rules[2] = new Rule(-1, new int[]{9,41,-3,-4,42,3});
    rules[3] = new Rule(-5, new int[]{-6,-7,43});
    rules[4] = new Rule(-7, new int[]{8});
    rules[5] = new Rule(-7, new int[]{8,31,-7});
    rules[6] = new Rule(-9, new int[]{});
    rules[7] = new Rule(-8, new int[]{13,-9,8,43});
    rules[8] = new Rule(-11, new int[]{});
    rules[9] = new Rule(-8, new int[]{-10,-11,43});
    rules[10] = new Rule(-12, new int[]{});
    rules[11] = new Rule(-8, new int[]{10,-12,39,-10,40,-8,11,-8});
    rules[12] = new Rule(-8, new int[]{12,39,-10,40,-8});
    rules[13] = new Rule(-8, new int[]{13,8,31,21,43});
    rules[14] = new Rule(-13, new int[]{});
    rules[15] = new Rule(-8, new int[]{14,-13,-14,43});
    rules[16] = new Rule(-8, new int[]{14,-10,31,21,43});
    rules[17] = new Rule(-8, new int[]{14,-14,43});
    rules[18] = new Rule(-8, new int[]{15,43});
    rules[19] = new Rule(-4, new int[]{-4,-8});
    rules[20] = new Rule(-4, new int[]{});
    rules[21] = new Rule(-3, new int[]{-5,-3});
    rules[22] = new Rule(-3, new int[]{});
    rules[23] = new Rule(-6, new int[]{16});
    rules[24] = new Rule(-6, new int[]{17});
    rules[25] = new Rule(-6, new int[]{18});
    rules[26] = new Rule(-14, new int[]{5});
    rules[27] = new Rule(-14, new int[]{4});
    rules[28] = new Rule(-14, new int[]{19});
    rules[29] = new Rule(-14, new int[]{20});
    rules[30] = new Rule(-14, new int[]{7});
    rules[31] = new Rule(-10, new int[]{-10,6,-10});
    rules[32] = new Rule(-10, new int[]{8,28,-10});
    rules[33] = new Rule(-10, new int[]{8});
    rules[34] = new Rule(-10, new int[]{-14});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // start -> Program, OpenBra, declaration_list, instruction_list, CloseBra, EOF
#line 31 ".\kompilator.y"
                    {
                      head = new Program(ValueStack[ValueStack.Depth-4].tree, ValueStack[ValueStack.Depth-3].tree);
                      ValueStack[ValueStack.Depth-4].tree.parent = head;
                      ValueStack[ValueStack.Depth-3].tree.parent = head;
                    }
#line default
        break;
      case 3: // declaration -> type, identifier_list, Semicolon
#line 40 ".\kompilator.y"
                                                    {
  CurrentSemanticValue.tree = new DeclarationList();
  Type type = ValueStack[ValueStack.Depth-3].type;
  foreach(string name in ValueStack[ValueStack.Depth-2].stringList) {
    CurrentSemanticValue.tree.children.Add(new Variable(type));
  }
}
#line default
        break;
      case 4: // identifier_list -> Ident
#line 48 ".\kompilator.y"
                          {
  CurrentSemanticValue.stringList = new List<string>();
  CurrentSemanticValue.stringList.Add(ValueStack[ValueStack.Depth-1].value);
}
#line default
        break;
      case 5: // identifier_list -> Ident, Comma, identifier_list
#line 52 ".\kompilator.y"
                                                {
                    ValueStack[ValueStack.Depth-1].stringList.Add(ValueStack[ValueStack.Depth-3].value);
                    CurrentSemanticValue.stringList = ValueStack[ValueStack.Depth-1].stringList;
                  }
#line default
        break;
      case 6: // Anon@1 -> /* empty */
#line 59 ".\kompilator.y"
                         {
                    // Compiler.EmitCode($"The expression equals {$$}");
                  }
#line default
        break;
      case 8: // Anon@2 -> /* empty */
#line 62 ".\kompilator.y"
                               {Compiler.EmitCode("Expression");}
#line default
        break;
      case 10: // Anon@3 -> /* empty */
#line 63 ".\kompilator.y"
                       {Compiler.EmitCode("If-Else");}
#line default
        break;
      case 14: // Anon@4 -> /* empty */
#line 67 ".\kompilator.y"
                          {
                    // Compiler.EmitCode($"The expression equals {$1}");
                  }
#line default
        break;
      case 15: // instruction -> Write, Anon@4, constant, Semicolon
#line 69 ".\kompilator.y"
                                       {
                    Compiler.EmitCode("X");
                  }
#line default
        break;
      case 17: // instruction -> Write, constant, Semicolon
#line 73 ".\kompilator.y"
                                             {
                    // Compiler.EmitCode($2);
                  }
#line default
        break;
      case 20: // instruction_list -> /* empty */
#line 82 ".\kompilator.y"
                    {
                    CurrentSemanticValue.tree = new DeclarationList();
                  }
#line default
        break;
      case 21: // declaration_list -> declaration, declaration_list
#line 87 ".\kompilator.y"
                                                 {
  CurrentSemanticValue.tree = ValueStack[ValueStack.Depth-1].tree;
  CurrentSemanticValue.tree.children.Add(ValueStack[ValueStack.Depth-2].tree);
}
#line default
        break;
      case 22: // declaration_list -> /* empty */
#line 91 ".\kompilator.y"
                    {
                    CurrentSemanticValue.tree = new DeclarationList();
                  }
#line default
        break;
      case 23: // type -> Int
#line 98 ".\kompilator.y"
                        {
  CurrentSemanticValue.type = Type.Integer;
}
#line default
        break;
      case 24: // type -> Double
#line 101 ".\kompilator.y"
                           {
  CurrentSemanticValue.type = Type.Real;
}
#line default
        break;
      case 25: // type -> Bool
#line 104 ".\kompilator.y"
                         {
  CurrentSemanticValue.type = Type.Boolean;
}
#line default
        break;
      case 31: // expression -> expression, Plus, expression
#line 119 ".\kompilator.y"
                                               {
                    CurrentSemanticValue = CurrentSemanticValue;
                  }
#line default
        break;
      case 34: // expression -> constant
#line 124 ".\kompilator.y"
                             {
                    CurrentSemanticValue = ValueStack[ValueStack.Depth-1];
                  }
#line default
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 130 ".\kompilator.y"
public Parser(Scanner scanner) : base(scanner) { }
public Tree head;
/* private char BinaryOpGenCode(Tokens t, char type1, char type2)
    {
    char type = ( type1=='i' && type2=='i' ) ? 'i' : 'r' ;
    if ( type1!=type )
        {
        Compiler.EmitCode("sldloc temp");
        }tloc temp");
        Compiler.EmitCode("conv.r8");
        Compiler.EmitCode("
    if ( type2!=type )
        Compiler.EmitCode("conv.r8");
    switch ( t )
        {
        case Tokens.Plus:
            Compiler.EmitCode("add");
            break;
        case Tokens.Minus:
            Compiler.EmitCode("sub");
            break;
        case Tokens.Multiplies:
            Compiler.EmitCode("mul");
            break;
        case Tokens.Divides:
            Compiler.EmitCode("div");
            break;
        default:
            Console.WriteLine($"  line {lineno,3}:  internal gencode error");
            ++Compiler.errors;
            break;
        }
    return type;
    } */
#line default
}
}
